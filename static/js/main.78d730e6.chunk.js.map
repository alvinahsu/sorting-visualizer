{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","left","right","pivot","low","high","p","min","max","random","getPivot","swap","border","partition","temp","getHeapSortAnimations","n","heapify","heapSortHelper","arr","largest","l","r","getBubbleSortAnimations","len","isSwapped","bubbleSortHelper","getInsertionSortAnimations","insertionSortHelper","getSelectionSortAnimations","min_index","selectionSortHelper","PRIMARY_COLOR","SECONDARY_COLOR","array_size","animation_speed_ms","SortingVisualizer","props","state","this","resetArray","setState","buttons","document","getElementsByTagName","disabled","getElementById","newSize","newSpeed","callback","sortingAlgorithms","timer","ms","Promise","res","setTimeout","enableB","a","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","backgroundColor","newHeight","height","load","isSwap","count","colorCount","first","second","console","log","className","onClick","type","defaultValue","step","onChange","handleChange","e","changeArraySizeAndSpeed","target","value","id","mergeSort","enableButton","disableButton","quickSort","heapSort","bubbleSort","insertionSort","selectionSort","map","idx","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.78d730e6.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSortHelper(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction quickSortHelper(mainArray, left, right, animations){\r\n  if (right - left >= 1){\r\n    let pivot = partition(mainArray, left, right ,animations);\r\n    quickSortHelper(mainArray, left, pivot-1,animations);\r\n    quickSortHelper(mainArray, pivot+1, right ,animations);\r\n  }\r\n}\r\n\r\nfunction swap(array, left, right , animations){\r\n  //indicate swap\r\n  let next = -1;\r\n  animations.push([next, next]);\r\n\r\n  let temp = array[left];\r\n  \r\n  //push swap animation\r\n  animations.push([left, array[right]]);\r\n  animations.push([right, temp]);\r\n\r\n  //push highlight animation\r\n  animations.push([left, right]);\r\n  animations.push([left, right]);\r\n  \r\n  array[left] = array[right];\r\n  array[right] = temp;\r\n}\r\n\r\nfunction getPivot (left, right){\r\n  return randomIntFromInterval(left, right);\r\n}\r\n\r\nfunction partition(array, low, high,animations){\r\n  let p = getPivot(low, high);\r\n  //Get animation for swap of pivot and lowest\r\n\r\n  //put pivot at the lowest index\r\n  swap(array, low, p,animations);\r\n  let border = low + 1;\r\n  for (let i = border; i <= high; i++){\r\n    animations.push([i, low]);\r\n    animations.push([i, low]);\r\n    if (array[i] < array[low]){\r\n      swap(array, i, border++, animations);\r\n    }\r\n  }\r\n  //put pivot back to original position\r\n  swap(array, low, border-1,animations);\r\n  return border-1;\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    heapSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction heapSortHelper(array, animations){\r\n  let n = array.length;\r\n\r\n  for (let i = Math.floor(n/2)-1; i>=0; i--){\r\n    heapify(array, n ,i, animations);\r\n  }\r\n\r\n  for (let i = n - 1; i > 0; i--){\r\n    swap(array, 0, i, animations);\r\n\r\n    heapify (array, i, 0, animations);\r\n  }\r\n}\r\n\r\nfunction heapify(arr, n, i, animations)\r\n{\r\n    let largest = i; // Initialize largest as root\r\n    let l = 2 * i + 1; // left = 2*i + 1\r\n    let r = 2 * i + 2; // right = 2*i + 2\r\n\r\n    if (l < n){\r\n      animations.push([l, largest]);\r\n      animations.push([l, largest]);\r\n    }\r\n    // If left child is larger than root\r\n    if (l < n && arr[l] > arr[largest])\r\n        largest = l;\r\n\r\n    if (r < n){\r\n      animations.push([r, largest]);\r\n      animations.push([r, largest]);\r\n    }\r\n    // If right child is larger than largest so far\r\n    if (r < n && arr[r] > arr[largest])\r\n        largest = r;\r\n\r\n    // If largest is not root\r\n    if (largest != i) {\r\n        swap(arr, i, largest, animations);\r\n\r\n        // Recursively heapify the affected sub-tree\r\n        heapify(arr, n, largest, animations);\r\n    }\r\n}\r\n\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations){\r\n  let i, j;\r\n  let len = array.length;\r\n  let isSwapped = false;\r\n  for(i =0; i < len; i++){\r\n    isSwapped = false;\r\n    for(j = 0; j < len; j++){\r\n        if (j+1 < len){\r\n          animations.push([j, j+1]);\r\n          animations.push([j, j+1]);\r\n        }\r\n        if(array[j] > array[j + 1]){\r\n          swap(array, j, j+1, animations);\r\n          isSwapped = true;\r\n        }\r\n    }\r\n    // IF no two elements were swapped by inner loop, then break \r\n    if(!isSwapped){\r\n      break;\r\n    }\r\n  } \r\n} \r\n\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    insertionSortHelper(array, array.length, animations);\r\n    return animations;\r\n}\r\n\r\nfunction insertionSortHelper(arr, n, animations){\r\n  let i, j; \r\n  for (i = 1; i < n; i++) { \r\n    j = i ; \r\n\r\n    /* Move elements of arr[0..i-1], that are \r\n    greater than key, to one position ahead \r\n    of their current position */\r\n\r\n    animations.push([j, i]);\r\n    animations.push([j, i]);\r\n    while (j > 0 && arr[j-1] > arr[j]) { \r\n      animations.push([j, i]);\r\n      animations.push([j, i]);\r\n      swap(arr, j, j-1, animations);\r\n      j--; \r\n    } \r\n  } \r\n}\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    selectionSortHelper(array, array.length, animations);\r\n    return animations;\r\n}\r\n\r\nfunction selectionSortHelper(arr, n, animations){\r\n  for (let i = 0; i < n; i++){\r\n    let min_index = i;\r\n    for (let j = i; j < n; j++){\r\n      animations.push([j, min_index]);\r\n      animations.push([j, min_index]);\r\n      if (arr[j] < arr[min_index]){\r\n        min_index = j;\r\n      }\r\n    }\r\n    if (min_index != i){\r\n      swap(arr, i, min_index, animations);\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport * as sortingAlgorithms from '../SortingAlgorithms/sortingAlgorithms';\r\n\r\nconst PRIMARY_COLOR = 'navy';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nlet array_size = 75;\r\nlet animation_speed_ms = 5;\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    /* When page loads, we generate array */\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    /* Resets the values of array */\r\n    resetArray(){\r\n        const array = [];\r\n        for (let i = 0; i < array_size; i++){\r\n            array.push(randomIntFromInterval(5, 500));\r\n        }\r\n        this.setState({array}); \r\n    }\r\n\r\n\r\n    disableButton(){\r\n        let buttons = document.getElementsByTagName('button');\r\n        for (let i = 0 ;i < buttons.length; i++){\r\n            buttons[i].disabled = true;\r\n        }\r\n        document.getElementById(\"barRange\").disabled = true;\r\n    }\r\n\r\n    enableButton(){\r\n        let buttons = document.getElementsByTagName('button');\r\n        for (let i = 0 ;i < buttons.length; i++){\r\n            buttons[i].disabled = false;\r\n        }\r\n        document.getElementById(\"barRange\").disabled = false;\r\n    }\r\n\r\n    changeArraySizeAndSpeed(newSize, newSpeed){\r\n        array_size = newSize;\r\n        animation_speed_ms = newSpeed;\r\n        this.resetArray();\r\n    }\r\n\r\n\r\n    mergeSort(callback){\r\n        const animations = sortingAlgorithms.getMergeSortAnimations(this.state.array);\r\n        const timer = ms => new Promise(res => setTimeout(res, ms))\r\n        async function load(enableB){\r\n           for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            //every two is comparison and third is change bar height\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },  animation_speed_ms);\r\n            } \r\n            else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, animation_speed_ms);\r\n            }\r\n            await timer(animation_speed_ms);\r\n            }\r\n            enableB();\r\n        }\r\n        load(callback);\r\n    }\r\n\r\n  quickSort(callback) {\r\n        const animations = sortingAlgorithms.getQuickSortAnimations(this.state.array);\r\n\r\n        const timer = ms => new Promise(res => setTimeout(res, ms))\r\n        async function load(enableB){\r\n            let isSwap = false;\r\n            let count = 0, colorCount = 0;\r\n           for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [first, second] = animations[i];\r\n            if (first === -1 && second === -1){\r\n                isSwap = true;\r\n            }\r\n            else if (!isSwap && first !== -1 && second !== -1) {\r\n                colorCount++;\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = colorCount === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                if (colorCount === 2) colorCount = 0;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },  animation_speed_ms);\r\n            } \r\n            else if (isSwap && first !== -1 && second !== -1) {\r\n                count++;\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                setTimeout(() => {\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, animation_speed_ms);\r\n                if (count === 2){\r\n                    isSwap = false;\r\n                    count = 0;\r\n                }\r\n            }\r\n\r\n            await timer(animation_speed_ms);\r\n            }\r\n            enableB();\r\n        }\r\n        load(callback);\r\n  }\r\n\r\n  heapSort(callback) {\r\n        const animations = sortingAlgorithms.getHeapSortAnimations(this.state.array);\r\n\r\n        const timer = ms => new Promise(res => setTimeout(res, ms))\r\n        async function load(enableB){\r\n            let isSwap = false;\r\n            let count = 0, colorCount = 0;\r\n           for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [first, second] = animations[i];\r\n            if (first === -1 && second === -1){\r\n                isSwap = true;\r\n            }\r\n            else if (!isSwap && first !== -1 && second !== -1) {\r\n                colorCount++;\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = colorCount === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                if (colorCount === 2) colorCount = 0;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                },  animation_speed_ms);\r\n            } \r\n            else if (isSwap && first !== -1 && second !== -1) {\r\n                count++;\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                setTimeout(() => {\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, animation_speed_ms);\r\n                if (count === 2){\r\n                    isSwap = false;\r\n                    count = 0;\r\n                }\r\n            }\r\n\r\n            await timer(animation_speed_ms);\r\n            }\r\n            enableB();\r\n        }\r\n        load(callback);\r\n\r\n  }\r\n\r\n  bubbleSort(callback) {\r\n    const animations = sortingAlgorithms.getBubbleSortAnimations(this.state.array);\r\n    const timer = ms => new Promise(res => setTimeout(res, ms))\r\n    async function load(enableB){\r\n        let isSwap = false;\r\n        let count = 0, colorCount = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [first, second] = animations[i];\r\n        if (first === -1 && second === -1){\r\n            isSwap = true;\r\n        }\r\n        else if (!isSwap && first !== -1 && second !== -1) {\r\n            colorCount++;\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = colorCount === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            if (colorCount === 2) colorCount = 0;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },  animation_speed_ms);\r\n        } \r\n        else if (isSwap && first !== -1 && second !== -1) {\r\n            count++;\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            setTimeout(() => {\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, animation_speed_ms);\r\n            if (count === 2){\r\n                isSwap = false;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        await timer(animation_speed_ms);\r\n        }\r\n        enableB();\r\n    }\r\n    load(callback);\r\n  }\r\n\r\n\r\n  insertionSort(callback) {\r\n     const animations = sortingAlgorithms.getInsertionSortAnimations(this.state.array);\r\n     console.log(animations);\r\n    const timer = ms => new Promise(res => setTimeout(res, ms))\r\n    async function load(enableB){\r\n        let isSwap = false;\r\n        let count = 0, colorCount = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [first, second] = animations[i];\r\n        if (first === -1 && second === -1){\r\n            isSwap = true;\r\n        }\r\n        else if (!isSwap && first !== -1 && second !== -1) {\r\n            colorCount++;\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = colorCount === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            if (colorCount === 2) colorCount = 0;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },  animation_speed_ms);\r\n        } \r\n        else if (isSwap && first !== -1 && second !== -1) {\r\n            count++;\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            setTimeout(() => {\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, animation_speed_ms);\r\n            if (count === 2){\r\n                isSwap = false;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        await timer(animation_speed_ms);\r\n        }\r\n        enableB();\r\n    }\r\n    load(callback);\r\n}\r\n\r\n  selectionSort(callback) {\r\n     const animations = sortingAlgorithms.getSelectionSortAnimations(this.state.array);\r\n     console.log(animations);\r\n    const timer = ms => new Promise(res => setTimeout(res, ms))\r\n    async function load(enableB){\r\n        let isSwap = false;\r\n        let count = 0, colorCount = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [first, second] = animations[i];\r\n        if (first === -1 && second === -1){\r\n            isSwap = true;\r\n        }\r\n        else if (!isSwap && first !== -1 && second !== -1) {\r\n            colorCount++;\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = colorCount === 1 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            if (colorCount === 2) colorCount = 0;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            },  animation_speed_ms);\r\n        } \r\n        else if (isSwap && first !== -1 && second !== -1) {\r\n            count++;\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            setTimeout(() => {\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n            }, animation_speed_ms);\r\n            if (count === 2){\r\n                isSwap = false;\r\n                count = 0;\r\n            }\r\n        }\r\n\r\n        await timer(animation_speed_ms);\r\n        }\r\n        enableB();\r\n    }\r\n    load(callback);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n        <div className=\"array-container\">\r\n            <div className=\"buttons\">\r\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n                <div className=\"slide-container\">\r\n                    <p>Change Array Size</p>\r\n                    <input type=\"range\" min=\"4\" max=\"150\" defaultValue=\"75\" \r\n                        step=\"1\" onChange={this.handleChange, e => this.changeArraySizeAndSpeed(e.target.value)} className=\"slider\" id=\"barRange\"/>\r\n                </div>\r\n                <button onClick={() => {this.mergeSort(this.enableButton); this.disableButton()}}>Merge Sort</button>\r\n                <button onClick={() => {this.quickSort(this.enableButton); this.disableButton()}}>Quick Sort</button>\r\n                <button onClick={() => {this.heapSort(this.enableButton); this.disableButton()}}>Heap Sort</button>\r\n                <button onClick={() => {this.bubbleSort(this.enableButton); this.disableButton()}}>Bubble Sort</button>\r\n                <button onClick={() => {this.insertionSort(this.enableButton); this.disableButton()}}>Insertion Sort</button>\r\n                <button onClick={() => {this.selectionSort(this.enableButton); this.disableButton()}}>Selection Sort</button>\r\n            </div>\r\n            <div className=\"bars\">\r\n                {array.map((value, idx) => (\r\n                <div\r\n                    className=\"array-bar\"\r\n                    key={idx}\r\n                    style={{\r\n                    backgroundColor: PRIMARY_COLOR,\r\n                    height: `calc(.13 * ${value}vh)`,\r\n                    }}></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}